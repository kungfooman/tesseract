// Shaders for Anticube 2

// vshaderparam fscale 0.000005 0.035531914 0.68950010

wtopt = [ >= (strstr $worldtype $arg1) 0 ]


shader 0 "acsky" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
    	gl_Position = camprojmatrix * vvertex;
	}
] [
    //@(gfetchdefs tex0)
    uniform sampler2DRect tex0;
	layout (location = 0) out vec4 fragcolor;
    void main(void)
    {
    	vec4 rlight = texture2D(tex0, gl_FragCoord.xy);
    	float bright = max(max(rlight.r, rlight.g), rlight.b);
    	bright = clamp(1.0 - (bright - 0.5) * 2.0, 0.0, 1.0);
		fragcolor.rgb = vec3(bright);
    }
]

shader 0 "acunrealtoon" [
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    uniform mat4 camprojmatrix;
    uniform vec2 texgenscroll;
    uniform vec3 camera;
    varying vec2 texcoord0;
    varying float dist;
    void main(void)
    {
    	gl_Position = camprojmatrix * vvertex;
    	texcoord0 = vtexcoord0 + texgenscroll;
    	dist = length(vvertex.xyz - camera);
    }
] [
	uniform vec4 colorparams;
    uniform sampler2D diffusemap;
    //varying vec3 nvec;
    varying vec2 texcoord0;
    varying float dist;
    @(gfetchdefs tex3)
    //uniform sampler2DRect tex0;
    uniform vec3 gdepthpackparams;
    layout (location = 0) out vec4 gcolor;
    void main(void)
    {
    	const float unrealend = 128.0;
    	const float unrealstart = 32.0;
    	const float refractmulti = 64.0;
    	if(dist <= unrealstart)
    		discard;
    	//vec3 normal = normalize(nvec);
		vec4 diffuse = texture2D(diffusemap, texcoord0);
		float alpha = clamp((dist - unrealstart) / (unrealend - unrealstart), 0.0, 1.0);
		if(alpha * 4.0 - length(diffuse.xy) <= 0)
			discard;
		vec2 toonPoint = gl_FragCoord.xy + (diffuse.xy - 0.5) * refractmulti * (1.0 - alpha);
		
		//gcolor = vec4(alpha, alpha, alpha, alpha);
		vec2[4] dir;
		dir[0] = vec2(-2.0, 0.0);
	 	dir[1] = vec2(2.0, 0.0);
	 	dir[2] = vec2(0.0, -2.0);
	 	dir[3] = vec2(0.0, 2.0);
		float[4] toondatadepth;
		vec4 packdeptha = vec4(0.0);
        for(int i = 0;i<dir.length();i = i + 1)
		{
			//@(gdepthunpack depth [gfetch(tex3, toonPoint + dir[i])])
	   		//@(gpackdepth packdeptha depth)
	   		packdeptha = gfetch(tex3, toonPoint + dir[i]);
	   		toondatadepth[i] = (packdeptha.r * 256.0 + packdeptha.g);
		}
	 	//@(gdepthunpack depth [gfetch(tex3, toonPoint)])
	    //@(gpackdepth packdeptha depth)
	    packdeptha = gfetch(tex3, toonPoint);
     	float toonlocaldepth = (packdeptha.r * 256.0 + packdeptha.g);
     	if((abs(abs(toondatadepth[2] - toonlocaldepth) - abs(toondatadepth[3] - toonlocaldepth)) > 0.05) || (abs(abs(toondatadepth[0] - toonlocaldepth) - abs(toondatadepth[1] - toonlocaldepth)) > 0.05))
    	{
	   		gcolor = vec4(0.01, 0.01, 0.01, 1.0);
		}
		else
		{
			gcolor = vec4(1.0);
		}
    }
]

shader 0 "actoon" [
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    uniform mat4 camprojmatrix;
    uniform vec2 texgenscroll;
    uniform vec3 camera;
    varying vec2 texcoord0;
    varying float dist;
    void main(void)
    {
    	gl_Position = camprojmatrix * vvertex;
    	texcoord0 = vtexcoord0 + texgenscroll;
    	dist = length(vvertex.xyz - camera);
    }
] [
	uniform vec4 colorparams;
    uniform sampler2D diffusemap;
    //varying vec3 nvec;
    varying vec2 texcoord0;
    varying float dist;
    @(gfetchdefs tex3)
    //uniform sampler2DRect tex0;
    uniform vec3 gdepthpackparams;
    layout (location = 0) out vec4 gcolor;
    void main(void)
    {
    	const float unrealend = -32.0;
    	const float unrealstart = -64.0;
    	const float refractmulti = 64.0;
    	if(dist <= unrealstart)
    		discard;
    	//vec3 normal = normalize(nvec);
		vec4 diffuse = texture2D(diffusemap, texcoord0);
		float alpha = clamp((dist - unrealstart) / (unrealend - unrealstart), 0.0, 1.0);
		if(alpha * 4.0 - length(diffuse.xy) <= 0)
			discard;
		vec2 toonPoint = gl_FragCoord.xy + (diffuse.xy - 0.5) * refractmulti * (1.0 - alpha);
		
		//gcolor = vec4(alpha, alpha, alpha, alpha);
		vec2[4] dir;
		dir[0] = vec2(-2.0, 0.0);
	 	dir[1] = vec2(2.0, 0.0);
	 	dir[2] = vec2(0.0, -2.0);
	 	dir[3] = vec2(0.0, 2.0);
		float[4] toondatadepth;
		vec4 packdeptha = vec4(0.0);
        for(int i = 0;i<dir.length();i = i + 1)
		{
			//@(gdepthunpack depth [gfetch(tex3, toonPoint + dir[i])])
	   		//@(gpackdepth packdeptha depth)
	   		packdeptha = gfetch(tex3, toonPoint + dir[i]);
	   		toondatadepth[i] = (packdeptha.r * 256.0 + packdeptha.g);
		}
	 	//@(gdepthunpack depth [gfetch(tex3, toonPoint)])
	    //@(gpackdepth packdeptha depth)
	    packdeptha = gfetch(tex3, toonPoint);
     	float toonlocaldepth = (packdeptha.r * 256.0 + packdeptha.g);
     	if((abs(abs(toondatadepth[2] - toonlocaldepth) - abs(toondatadepth[3] - toonlocaldepth)) > 0.05) || (abs(abs(toondatadepth[0] - toonlocaldepth) - abs(toondatadepth[1] - toonlocaldepth)) > 0.05))
    	{
	   		gcolor = vec4(0.01, 0.01, 0.01, 1.0);
		}
		else
		{
			gcolor = vec4(1.0);
		}
    }
]

shader 0 "acappear" [
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    uniform mat4 camprojmatrix;
    uniform vec2 texgenscroll;
    uniform vec3 camera;
    varying vec2 texcoord0;
    varying float render;
    void main(void)
    {
    	const float round = 8.0;
    	const float maxdist = 40.0;
    	gl_Position = camprojmatrix * vvertex;
    	texcoord0 = vtexcoord0 + texgenscroll;
    	vec3 roundedCamera = floor(camera / round) * round;
    	vec3 roundedVertex = floor(vvertex.xyz / round) * round;
    	if(length(roundedCamera - roundedVertex) < maxdist)
    	{
    		render = 1.0;
    	}
    	else
    	{
    		render = 0.0;
    	}
	}
] [
    uniform sampler2D diffusemap;
    varying vec2 texcoord0;
    varying float render;
    layout (location = 0) out vec4 fragcolor;
    void main(void)
    {
		if(render < 0.5)
		{
			discard;
		}
		else
		{
			fragcolor = vec4(texture2D(diffusemap, texcoord0).rgb, 1.0);	
		}
    }
]

acgeneralvariantshader = [
    local worldtype
    worldtype = $arg2
    stype = (? (wtopt "r") 3 1)
    srow = -1
    defuniformparam "refract" 64.0 8.0 8.0
    if (wtopt "n") [
        defuniformparam "nscale" 1.0 0.0 0.0 0.0
    ]
    if (wtopt "f") [
        defuniformparam "fogparams" 0.0 0.0 0.0 16.0
    ]
    if (wtopt "e") [
        defuniformparam "eye" 1024.0 0.0 0.0 0.0
    ]
    if (wtopt "z") [
        defuniformparam "minz" 0.5
    ]
    variantshader $stype $arg1 $srow [
        attribute vec4 vvertex;
        attribute vec3 vnormal;
        attribute vec2 vtexcoord0;
        uniform mat4 camprojmatrix;
        uniform vec2 texgenscroll;
        varying vec3 nvec;
        varying vec2 texcoord0;
        @(? (wtopt "n") [
        	attribute vec4 vtangent;
        	varying mat3 world;
        ])
        @(? (wtopt "e") [
        	varying vec3 pos;
        ])
        @(? (wtopt "z") [
        	varying vec2 texcoord0noscroll;
        ])
        @(? (wtopt "r") [uniform vec3 camera; varying vec3 camvec;])
        @(msaainterpvert)
        void main(void)
        {
        	@(? (wtopt "n") [
        		vec3 bitangent = cross(vnormal, vtangent.xyz) * vtangent.w;
                // calculate tangent -> world transform
                world = mat3(vtangent.xyz, bitangent, vnormal);
        	])
        	@(? (wtopt "e") [
        		pos = vvertex.xyz;
        	])
        	@(? (wtopt "r") [camvec = camera - vvertex.xyz ;])
        	nvec = vnormal;
        	texcoord0 = vtexcoord0 + texgenscroll;
        	@(? (wtopt "z") [texcoord0noscroll = vtexcoord0;])
        	gl_Position = camprojmatrix * vvertex;
            @(msaapackvert)
        }
    ] [     
        uniform vec4 colorparams;
        uniform sampler2D diffusemap;
        @(? (wtopt "z") [
        	varying vec2 texcoord0noscroll;
        	uniform sampler2D normalmap;
        ])
        @(? (wtopt "r") [uniform samplerCube envmap; varying vec3 camvec;])
        @(? (wtopt "c") [
        	@(gfetchdefs refractlight)
        ])
        @(? (wtopt "f") [
        	@(gfetchdefs tex3)
        	uniform sampler2DRect refractlight;
        ])
        @(? $msaasamples [uniform float hashid;])
        varying vec3 nvec;
        varying vec2 texcoord0;
        @(? (wtopt "n") [
        	varying mat3 world;
        	uniform sampler2D normalmap;
        ])
        @(? (wtopt "e") [
        	uniform vec3 camera;
        	varying vec3 pos;
        ])
        @(msaainterpfrag)
        void main(void)
        {
        	vec4 diffuse = texture2D(diffusemap,texcoord0);
        	vec3 normal = normalize(nvec);
        	
        	@(? (wtopt "z") [
        		vec3 bump = texture2D(normalmap, texcoord0).rgb - 0.5;
        		vec3 bump2 = texture2D(diffusemap, texcoord0noscroll).rgb - 0.5;
        		if (minz.x < dot(bump, bump2))
        		{
        			gglow.rgb = texture2D(diffusemap,texcoord0noscroll).rgb;
        		}
        		else
        		{
        			discard;
        		}
        	])
        	
        	@(? (wtopt "n") [
        		vec3 bump = texture2D(normalmap, texcoord0).rgb - 0.5;
        		bump = normalize(vec3(bump.xy * nscale.x, bump.z));
                normal = normalize(world * bump);
        	])
        	
        	@(if (wtopt "r") [result [
        		vec3 camvecn = normalize(camvec);
                float invfresnel = dot(camvecn, normal);
                vec3 rvec = 2.0*normal*invfresnel - camvecn;
                gglow.rgb = textureCube(envmap, rvec).rgb;
            ]]) 
            
			@(? (wtopt "c") [
        		vec3 bcolor = gfetch(refractlight, gl_FragCoord.xy).rgb;
        		float brightness = max(bcolor.r, max(bcolor.g, bcolor.b));
        		gglow.rgb += vec3(colorparams.rgb * brightness);
        	])
        	@(? (wtopt "f") [
        		float mdepth2 = (gl_FragCoord.z / gl_FragCoord.w) / 32;
    			vec4 mdepth3 = gfetch(tex3, gl_FragCoord.xy);
        		float mdepth = (mdepth3.r * 256.0 + mdepth3.g);
        		float fog = clamp(abs(mdepth - mdepth2) / fogparams.w, 0.0, 1.0);
        		gcolor.rgb = mix(texture2D(refractlight, gl_FragCoord.xy).rgb, fogparams.rgb, fog * fog);
        	])
        	@(? (wtopt "e") [
        		vec3 toCam = normalize(camera - pos);
        		float eyescale = dot(toCam, normal);
        		gcolor.rgb = diffuse.rgb * clamp(eyescale * eye.x - eye.y, 0.0, 1.0);;
        	])
            @(gnormpackdef normal packnorm)
            @(msaapackfrag "" hashid)
        }
    ]
]

acgeneralhader = [
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    if (wtopt "T") [
        stype = (+ $stype 0x20)
    ]
    if ()
    defershader $stype $arg1 [
        acgeneralvariantshader @arg1 @arg2
        acgeneralvariantshader @arg1 @(concatword $arg2 "b")
        acgeneralvariantshader @arg1 @(concatword $arg2 "a")
        acgeneralvariantshader @arg1 @(concatword $arg2 "aA")
    ]
]

acgeneralhader "accolored" "c"
acgeneralhader "acfogplane" "f"
acgeneralhader "aceye" "ne"
acgeneralhader "acenv" "nr"
acgeneralhader "accb" "z"

shader 0 "acblackvolfog" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    @(gfetchdefs tex3)
    //uniform sampler2DRect refractlight;
    uniform vec3 gdepthpackparams;
    layout (location = 0) out vec4 fragcolor;
    void main(void)
    {
    	float mdepth2 = (gl_FragCoord.z / gl_FragCoord.w) / 32;
    	@(gdepthunpack depth [gfetch(tex3, gl_FragCoord.xy)])
        @(gpackdepth packdepth depth)
        float mdepth = (packdepth.r * 256.0 + packdepth.g);
        float fog = clamp(abs(mdepth - mdepth2) / 16, 0.0, 1.0);
        fragcolor = vec4(0.0, 0.0, 0.0, fog * fog);
    }
]

shader 0 "acnorender" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    void main(void)
    {
    	discard;
    }
]

shader 0 "acshield" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    @(gfetchdefs tex3)
    uniform sampler2DRect refractlight;
    uniform vec3 gdepthpackparams;
    layout (location = 0) out vec4 fragcolor;
    void main(void)
    {
    	vec2 coords[5];
    	vec4 color = vec4(0.3, 0.0, 0.0, 0.3);
    	float mdepth2 = (gl_FragCoord.z / gl_FragCoord.w) / 32;
    	coords[0] = gl_FragCoord.xy;
    	coords[1] = gl_FragCoord.xy + vec2(3.0, 0.0);
    	coords[2] = gl_FragCoord.xy - vec2(3.0, 0.0);
    	coords[3] = gl_FragCoord.xy + vec2(0.0, 3.0);
    	coords[4] = gl_FragCoord.xy - vec2(0.0, 3.0);
    	//coords[5] = gl_FragCoord.xy + vec2(5.0, 0.0);
    	//coords[6] = gl_FragCoord.xy - vec2(5.0, 0.0);
    	//coords[7] = gl_FragCoord.xy + vec2(0.0, 5.0);
    	//coords[8] = gl_FragCoord.xy - vec2(0.0, 5.0);
    	for(int i=0; i<coords.length(); i++) {
	    	@(gdepthunpack depth [gfetch(tex3, coords[i])])
	        @(gpackdepth packdepth depth)
	        float mdepth = (packdepth.r * 256.0 + packdepth.g);
	        if(abs(mdepth - mdepth2) < 0.05)
	        {
	        	color = vec4(1.0, 0.3, 0.0, 1.0);
	        }
        }
        fragcolor = color;
    }
]


acvertexvariantshader = [
    local worldtype
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    srow = -1
    if (wtopt "f") [
        defuniformparam "alphatest" 0.1 0.0 0.0 0.0
    ]
	if (wtopt "s") [
        defuniformparam "sphere" 0.0 0.0 0.0 8.0
    ]
    if (wtopt "w") [
        defuniformparam "rcolor" 1.0 1.0 1.0 0.1
    ]
    if (wtopt "l") [
        defuniformparam "portal" 1.0 1.0 0.0 0.0
    ]
    defuniformparam "refract" 64.0 8.0 8.0 8.0
    variantshader $stype $arg1 $srow [
        attribute vec4 vvertex, vtangent;
        attribute vec3 vnormal;
        attribute vec2 vtexcoord0;
        uniform mat4 camprojmatrix;
        uniform vec2 texgenscroll;
        uniform vec4 viewsize;
        varying vec3 nvec;
        varying vec2 texcoord0;
        varying vec3 position;
        @(? (wtopt "p") [
        	varying float col;
        ])
        @(? (wtopt "w") [
        	varying vec3 refractvec;
        	uniform sampler2D normalMap;
        ])
        @(? (wtopt "h") [
        	varying mat3 world;
        	uniform sampler2D glowMap;
        ])
        uniform vec3 camera;
        uniform vec4 millis;
        @(msaainterpvert)
        void main(void)
        {
        	vec4 pos = vvertex;
        	@(? (wtopt "s") [
        		float radius = sphere.w;
        		vec3 newpos = pos.xyz - sphere.xyz;
        		float dist = length(newpos);
        		pos.xyz = sphere.xyz + newpos.xyz / dist * radius;
	        	@(? (wtopt "p") [
	        		col = clamp(length(pos.xyz - camera) / (sphere.w * 2.0), 0.0, 1.0);
	        	])
        	])
        	@(? (wtopt "w") [
        		vec4 horizon4 = (camprojmatrix * vec4(sphere.xyz, 1));
				vec3 horizon = horizon4.xyz / horizon4.w;
				horizon.xy = horizon.xy * (viewsize.xy / 2) + viewsize.xy / 2;
				vec4 horizon42 = (camprojmatrix * vec4(pos.xyz, 1));
				vec3 horizon2 = horizon42.xyz / horizon42.w;
				horizon2.xy = horizon2.xy * (viewsize.xy / 2) + viewsize.xy / 2;
				//float lng = length(horizon2 - horizon);
        		refractvec = (horizon2 - horizon).xyz;
        		//float plc = sqrt(pos.x * pos.x + pos.y * pos.y);
        		//float lng = length(pos.xyz - sphere.xyz);
        		//refractvec.z = sqrt(lng * lng - plc * plc);
        		refractvec = normalize(refractvec);
        		//pos.xyz += (texture2D(normalMap, vtexcoord0 + texgenscroll).xyz - 0.5) * refract.y; 
        	])
        	@(? (wtopt "h") [
        		vec3 bitangent = cross(vnormal, vtangent.xyz) * vtangent.w;
        		world = mat3(vtangent.xyz, bitangent, vnormal);
        		float heigh = texture2D(glowMap, vtexcoord0 + texgenscroll).x;
        		pos.z += heigh * refract.w;
        	])
        	position = pos.xyz;
        	vec4 glpos = camprojmatrix * pos;
            gl_Position = glpos;
            @(? (wtopt "t") [
	        	gl_Position = vec4(vtexcoord0.x * viewsize.x, vtexcoord0.y * viewsize.y, 1.0, 1.0);
	        ])
            texcoord0 = vtexcoord0 + texgenscroll;
            nvec = vnormal;
            @(? (wtopt "s") [
	        	nvec = normalize(pos.xyz - sphere.xyz);
	        ])
            @(msaapackvert)
        }
    ] [     
        uniform vec4 colorparams;
        uniform sampler2D diffusemap;
        @(? (wtopt "h") [
        	uniform sampler2D normalMap;
        	varying mat3 world;
        ])
        @(? $msaasamples [uniform float hashid;])
        varying vec3 nvec;
        varying vec2 texcoord0;
        @(? (wtopt "p") [
        	varying float col;
        ])
        @(? (wtopt "l") [
        	uniform vec4 viewsize;
        	uniform vec4 refractparams;
        ])
        varying vec3 position;
        uniform vec3 camera;
        @(? (wtopt "w") [
        	@(gfetchdefs refractlight)
        	varying vec3 refractvec;
        	uniform sampler2D normalmap;
        ])
        @(msaainterpfrag)
        
        void main(void)
        {
        	vec4 diffuse = texture2D(diffusemap,texcoord0);
        	
        	
        	@(? (wtopt "f") [
        		if (diffuse.r < alphatest.x)
        		{
        			discard;
        		}
        		else
        		{
        			gglow.rgb += diffuse.rgb;
        		}
        	])
        	
        	
        	
        	@(? (wtopt "p") [
        		diffuse *= col;
        	])
        	vec3 normal = normalize(nvec);
        	@(? (wtopt "h") [
        		vec4 bump = texture2D(normalMap,texcoord0) * 2.0 - 1.0;
        		diffuse *= bump.w;
        		normal = normalize(world * bump.xyz);
        	])
	   		@(? (wtopt "w") [
	   			vec3 bump = texture2D(normalmap,texcoord0).xyz - 0.5;
        		vec3 rlight = gfetch(refractlight, gl_FragCoord.xy + (refractvec.xy / dot(normalize(camera - position), normalize(sphere.xyz - position)) + bump.xy) * refract.x).rgb;
        		vec3 glow = rlight * rcolor.rgb;
        		glow += rcolor.rgb * rcolor.w;
        		@(? (wtopt "l") [
        			vec3 origcolor = gfetch(refractlight, gl_FragCoord.xy).rgb;
        			vec2 portaltex = refractvec.xy / dot(normalize(camera - position), normalize(sphere.xyz - position));
        			portaltex = vec2((portaltex.x + bump.x) / viewsize.x, (portaltex.y + bump.y) / viewsize.y) * refractparams.w - vec2(0.5, 0.5);
        			vec3 portalglow = texture2D(diffusemap, vec2(1.0 - portaltex.x, portaltex.y)).rgb;
        			glow = mix(glow, portalglow, portal.x);
        			glow = mix(origcolor, glow, portal.y);
        			//glow.rgb = refractvec;
        		])
				gglow.rgb += glow;
        		//gglow.rgb += refractvec;
        	] [
				gcolor = diffuse;
			])
			
            @(gnormpackdef normal packnorm)
            @(msaapackfrag "" hashid)
        }
    ]
]

acvertexshader = [
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    if (wtopt "T") [
        stype = (+ $stype 0x20)
    ]
    if ()
    defershader $stype $arg1 [
        acvertexvariantshader @arg1 @arg2
        acvertexvariantshader @arg1 @(concatword $arg2 "b")
        acvertexvariantshader @arg1 @(concatword $arg2 "a")
        acvertexvariantshader @arg1 @(concatword $arg2 "aA")
    ]
]

acvertexshader "acvertextest" ""
acvertexshader "acvertexsphere" "s"
acvertexshader "acvertexsphereplayer" "sp"
acvertexshader "acvertexspherewater" "sw"
acvertexshader "acvertexspherewportal" "swl"
acvertexshader "acvertextitle" "t"
acvertexshader "acvertexheigh" "h"
acvertexshader "acvertexfirework" "sf"






acfractalvariantshader = [
    local worldtype
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    srow = -1
    defuniformparam "hsv" 0.0 0.0 0.0
    defuniformparam "fscale" 1000.0 0.0 0.0 20.0
	if (wtopt "h") [
        defuniformparam "hspeed" 0.02
    ]
    if (wtopt "b") [
        srow = 0
    ]
    if (wtopt "a") [
        if (wtopt "A") [stype = (+ $stype 4)]
        srow = 1
    ]
    variantshader $stype $arg1 $srow [
        attribute vec4 vvertex;
        attribute vec3 vnormal;
        attribute vec2 vtexcoord0;
        uniform mat4 camprojmatrix;
        uniform vec2 texgenscroll;
        varying vec3 nvec;
        varying vec2 texcoord0;
        uniform vec3 camera;
        uniform vec4 millis;
		varying vec2 seed;
        @(msaainterpvert)
        void main(void)
        {
            gl_Position = camprojmatrix * vvertex;
            texcoord0 = vtexcoord0 + texgenscroll;
            nvec = vnormal;
        	seed = vec2(sin(millis.x), cos(millis.x));
            @(msaapackvert)
        }
    ] [
		#define double float
		#define dvec2 vec2
		#define dvec3 vec3
		#define dvec4 vec4
		
		varying vec2 seed;
        
	    vec3 rgb2hsv(vec3 c)
		{
	   		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	   		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	    	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
	
	    	float d = q.x - min(q.w, q.y);
	    	float e = 1.0e-10;
	    	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
		}
		vec3 hsv2rgb(vec3 c)
		{
	    	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	    	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	    	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
		}
        
        uniform vec4 colorparams;
        uniform vec4 millis;
        uniform sampler2D diffusemap;
        @(? (wtopt "w") [
        	uniform sampler2D glowmap;
        ])
        @(? $msaasamples [uniform float hashid;])
        varying vec3 nvec;
        @(msaainterpfrag)
		varying vec2 texcoord0;
        void main(void)
        {
        	vec3 normal = normalize(nvec);
        	vec3 final = vec3(1.0);
        	
        	dvec2 uv = texcoord0 - floor(texcoord0);
        	int iter = 100;
        	dvec2 center = fscale.yz;
			double scale = fscale.x / double(1000.0);
        	
        	dvec2 c, z;
        	@(? (wtopt "n") [
        		center = dvec2(0.035531914, 0.68950010);
        		double speed = 60.0;
        		double ma = abs(millis.x / speed - floor(millis.x / speed) - double(0.5)) * 2.0;
        		//ma = ma * ma * ma * ma * ma * ma * ma * ma * ma * ma * ma * ma; // lol
        		ma *= ma;		
        		ma *= ma;		// Same as the commented line above
        		ma *= ma * ma;	// Black magic
        		//double zoom = 0.000000005;
        		double zoom = 0.00005;
        		//scale = double(0.000005) * (double(2.0) - ma) + ma;
        		scale = mix(zoom, double(5.0), ma);
        	])
        	@(? (wtopt "m") [
        		c.x = 1.3333 * (uv.x - 0.5) * scale - center.x;
    			c.y = (uv.y - 0.5) * scale - center.y;
        	])
        	@(? (wtopt "j") [
        		c = seed * 0.05 + vec2(0.295, 0.59);
        	])
			z.x = (uv.x - 0.5) * scale - center.x;
			z.y = (uv.y - 0.5) * scale - center.y;
			
			int i;
			for(i=0; i<iter; i++) {
				double x = (z.x * z.x - z.y * z.y) + c.x;
				double y = (z.y * z.x + z.x * z.y) + c.y;
	
				if((x * x + y * y) > 4.0) break;
				z.x = x;
				z.y = y;
	   		}
	   		@(? (wtopt "h") [
        		final = hsv2rgb(rgb2hsv(texture2D(diffusemap, vec2((i == iter ? 0.0 : float(i)) / 100.0, uv.y)).rgb) + vec3(millis.x / (1.0 / hspeed.x) - floor(millis.x / (1.0 / hspeed.x)), 0.0, 0.0));
        	] [
				final = hsv2rgb(rgb2hsv(texture2D(diffusemap, vec2((i == iter ? 0.0 : float(i)) / 100.0, uv.y)).rgb) + hsv.rgb);
			])
	   		@(? (wtopt "w") [
	   			vec3 glow = final * fscale.w;
	   			@(if (wtopt "a") [result [
                    gglow.rgb = glow;
                ]] [gglowpack glow packnorm]) 
        		if (i < 10)
        		{
        			final = texture2D(glowmap, texcoord0).rgb;
        		}
        	])
        	@(? (wtopt "g") [
        		final = 1.0 - final;
        		vec3 glow = final;
        		@(gglowpack glow packnorm)
        	])
	   		gcolor.rgb = final;
            @(gnormpackdef normal packnorm)
            @(msaapackfrag "" hashid)
        }
    ]
]

acfractalshader = [
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    if (wtopt "T") [
        stype = (+ $stype 0x20)
    ]
    if ()
    defershader $stype $arg1 [
        acfractalvariantshader @arg1 @arg2
        acfractalvariantshader @arg1 @(concatword $arg2 "b")
        acfractalvariantshader @arg1 @(concatword $arg2 "a")
        acfractalvariantshader @arg1 @(concatword $arg2 "aA")
    ]
]

acfractalshader "acfractaljulia" "jg"
acfractalshader "acfractalmandelbrod" "mg"
acfractalshader "acfractalmandelbrodanim" "mng"
acfractalshader "acfractaljuliarainbow" "jhg"
//acfractalshader "acfractaljuliarainbowwall" "jhwg"
acfractalshader "acfractalmandelbrodrainbow" "mhg"
acfractalshader "acfractalmandelbrodanimrainbow" "mnhg"


// Below here are the oldest shaders, thus the worst and buggiest ones, mostly unused.

actoonvariantshader = [
    local worldtype
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    srow = -1
    
    defuniformparam "faralpha" 0.0
    defuniformparam "nearalpha" 1.0
    defuniformparam "distmulti" 0.025
    defuniformparam "vertexmulti" 8
    defuniformparam "fragmulti" 8
    if (wtopt "d") [
        defuniformparam "mindistance" 150
        defuniformparam "maxdistance1" 100
        defuniformparam "maxdistance2" 50
        defuniformparam "refractmulti" 30.0 0.3
    ]
    if (wtopt "n") [
        defuniformparam "changed" 0.5
    ]
    if (wtopt "b") [
        srow = 0
    ]
    if (wtopt "a") [
        if (wtopt "A") [stype = (+ $stype 4)]
        srow = 1
    ]
    variantshader $stype $arg1 $srow [
        attribute vec4 vvertex;
        attribute vec3 vnormal;
        attribute vec2 vtexcoord0;
        uniform mat4 camprojmatrix;
        uniform vec2 texgenscroll;
        varying vec3 nvec;
        varying vec2 texcoord0;
        @(if (wtopt "d") [result [
            varying float distancereal;
        ]])
        @(if (wtopt "a") [result [
            varying vec4 spacepos;
  			varying vec3 campos;
        ]])
        uniform vec3 camera;
        @(msaainterpvert)
        @(? (wtopt "b") [
            uniform vec4 blendmapparams;
            varying vec2 texcoord1;
        ])
        void main(void)
        {
            gl_Position = camprojmatrix * vvertex;
            @(? (wtopt "b") [
                texcoord1 = (vvertex.xy - blendmapparams.xy)*blendmapparams.zw;
            ])
            texcoord0 = vtexcoord0 + texgenscroll;
            nvec = vnormal;
            @(if (wtopt "a") [result [
            	float multi = vertexmulti.x;
        		spacepos = floor((vvertex + 0.5) / multi) * multi;
       			campos = floor((camera + 0.5) / multi) * multi;
       		]])
       		@(if (wtopt "d") [result [
            	distancereal = sqrt((vvertex.x - camera.x) * (vvertex.x - camera.x) + (vvertex.y - camera.y) * (vvertex.y - camera.y) + (vvertex.z - camera.z) * (vvertex.z - camera.z));
        	]])
            @(msaapackvert)
        }
    ] [
    	
    	@(if (wtopt "d") [result [
            varying float distancereal;
        ]])
    	@(if (wtopt "a") [result [
            varying vec4 spacepos;
  			varying vec3 campos;
            @(gfetchdefs refractlight)
            uniform sampler2DRect tex3;
            uniform vec4 refractparams;
            layout (location = 0) out vec4 fragcolor;
        ]])
        uniform vec4 colorparams;
        uniform sampler2D diffusemap;
        @(? $msaasamples [uniform float hashid;])
        varying vec3 nvec;
        @(msaainterpfrag)
        @(? (wtopt "b") [
            uniform float blendlayer;
            uniform sampler2D blendmap;
            varying vec2 texcoord1;
        ])
        @(? (wtopt "d") [
            uniform sampler2D glowmap;
        ])
		varying vec2 texcoord0;
        void main(void)
        {
            vec3 normal = normalize(nvec);
			vec4 diffuse = texture2D(diffusemap, texcoord0);  
			@(if (wtopt "A") [
				gcolor.rgb = vec3(0.0);
            ] [
            	gcolor.rgb = diffuse.rgb*colorparams.rgb;
            ])
            @(if (wtopt "a") [
                ? (wtopt "A") [
                	vec2[4] dir;
    				dir[0] = vec2(-2.0, 0.0);
    			 	dir[1] = vec2(2.0, 0.0);
    			 	dir[2] = vec2(0.0, -2.0);
    			 	dir[3] = vec2(0.0, 2.0);
                	float alphad = 1.0;
                	@(if (wtopt "d") [result [
                		#define packnorm colorparams.a
                		float factord = 1.0 - clamp(distancereal / mindistance.x, 0.0, 1.0);
                		vec2 bump = (factord * (texture2D(glowmap, texcoord0).xy - 0.5) * refractmulti.x);
                		alphad = clamp((distancereal - maxdistance2.x) / (maxdistance1.x - maxdistance2.x), 0.0, 1.0);
					]] [result [
						float factord = 1.0;
						vec2 bump = vec2(0.0);
					]])
    				
    				float[4] toondatadepth;
                	for(int i = 0;i<dir.length();i = i + 1)
	 				{
	 					@(gdepthunpack depth [texture2D(tex3, gl_FragCoord.xy + dir[i] + bump)])
     			   		@(gpackdepth packdeptha depth)
     			   		toondatadepth[i] = (packdeptha.r * 256.0 + packdeptha.g);
	 				}
    			 	@(gdepthunpack depth [texture2D(tex3, gl_FragCoord.xy + bump)])
    			    @(gpackdepth packdeptha depth)
   			     	float toonlocaldepth = (packdeptha.r * 256.0 + packdeptha.g);
   			     	vec3 colordepth = vec3(1.0);
   			     	if((abs(abs(toondatadepth[2] - toonlocaldepth) - abs(toondatadepth[3] - toonlocaldepth)) > 0.05) || (abs(abs(toondatadepth[0] - toonlocaldepth) - abs(toondatadepth[1] - toonlocaldepth)) > 0.05))
   			    	{
    			   		colordepth = vec3(0.0);
      			 	}
      			 	
        			gglow.rgb += colordepth * alphad;
        			fragcolor = vec4(colordepth * alphad, alphad);
                ] [
                		@(if (wtopt "n") [result [
                			vec2 bump1 = (changed.x * (texture2D(glowmap, texcoord0).xy - 0.5) * refractmulti.x);
                			vec2 bump2 = ((1.0 - changed.x) * (texture2D(glowmap, texcoord0).xy - 0.5) * refractmulti.y);
                			vec3 rlight = gfetch(refractlight, gl_FragCoord.xy + bump1).rgb;
                			vec3 color = texture2D(diffusemap, texcoord0 + bump2).rgb;
                			color = mix(rlight, color, changed.x);
                			gglow.rgb += color;
        					//gcolor.rgb += color;
                		]] [result [
	                    	#define packnorm colorparams.a
	                    	float multi2 = fragmulti.x;
	    					vec3 space = floor((spacepos.rgb - campos.rgb) / multi2) * multi2;
							float dist2d = sqrt(space.r * space.r + space.b * space.b);
							float dist3d = sqrt(space.g * space.g + dist2d * dist2d) + 0.02;
	  			  			float alpha = clamp(1.0 + dist3d * -distmulti.x, 0.0, 1.0);
	 				   	
	 				   		if(alpha > 0.001)
	 				 	  	{
	  				  			alpha = nearalpha.x;
	  					  	}
	   					 	else
	   					 	{
	   					 		alpha = faralpha.x;
		   				 	}
	   				 		if(alpha > 0.5)
	   					 	{
	   					 		gglow.rgb += diffuse.rgb*colorparams.rgb;
	   					 	}
	   					 	else
	  	 				 	{
	   				 			gglow.rgb += gfetch(refractlight, gl_FragCoord.xy).rgb;
	   				 		}
   				 		]])
                ]
            ])

            @(gnormpackdef normal packnorm)

            @(msaapackfrag "" hashid)

            @(? (wtopt "b") [
                float blend = abs(texture2D(blendmap, texcoord1).r - blendlayer);
                gcolor *= blend;
                gnormal.rgb *= blend;
                gnormal.a *= blendlayer;
            ])
        }
    ]
]

acshader = [
    worldtype = $arg2
    stype = (? (wtopt "e") 3 1)
    if (wtopt "T") [
        stype = (+ $stype 0x20)
    ]
    if ()
    defershader $stype $arg1 [
        actoonvariantshader @arg1 @arg2
        actoonvariantshader @arg1 @(concatword $arg2 "b")
        actoonvariantshader @arg1 @(concatword $arg2 "a")
        actoonvariantshader @arg1 @(concatword $arg2 "aA")
    ]
]

//acshader "actoonworld" ""
//acshader "acdualalphaworld" "d"
//acshader "acunrealworld" "dn"









// (Unused)
shader 0 "acblackwhite" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    @(gfetchdefs [refractlight refractmask])
    uniform vec4 refractparams;
    layout (location = 0) out vec4 fragcolor;
    void main(void)
    {        
		vec3 bw = gfetch(refractlight, gl_FragCoord.xy).rgb;
       	float factor = max(max(bw.r, bw.g), bw.b);
        fragcolor.rgb = vec3(1.0 - factor);
        fragcolor.a = 1.0;
    }
]



shader 0 "acdepth" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    @(gfetchdefs tex3)
    uniform vec3 gdepthpackparams;
    layout (location = 0) out vec4 fragcolor;
    void main(void)
    {        
    	@(gdepthunpack depth [gfetch(tex3, gl_FragCoord.xy)])
        @(gpackdepth packdepth depth)
       	float updepth = packdepth.r * 256.0 + packdepth.g;
        fragcolor.rgb = vec3(updepth / 8.0);
        fragcolor.a = 1.0;
    }
] 

shader 0 "acnormal" [
    attribute vec4 vvertex;
    uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    @(gfetchdefs tex1)
    layout (location = 0) out vec4 fragcolor;
    void main(void)
    {
        fragcolor.rgb = gfetch(tex1, gl_FragCoord.xy).rgb;
        fragcolor.a = 1.0;
    }
] 

//shader 0 "acnormaldepth" [
//    attribute vec4 vvertex;
//    uniform mat4 camprojmatrix;
//    void main(void)
//    {
//        gl_Position = camprojmatrix * vvertex;
//    }
//] [
//    @(gfetchdefs tex1)
//    uniform sampler2DRect tex3;
//    uniform vec3 gdepthpackparams;
//    fragdata(0, fragcolor, vec4)
//    void main(void)
//    {
//    	@(gdepthunpack depth [gfetch(tex3, gl_FragCoord.xy)])
//        @(gpackdepth packdepth depth)
//        fragcolor.rgb = gfetch(tex1, gl_FragCoord.xy).rgb * ((packdepth.r * 256.0 + packdepth.g) / 8.0);
//        fragcolor.a = 1.0;
//    }
//]

lazyshader 0 "invis" [
	attribute vec4 vvertex;
	uniform mat4 camprojmatrix;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
    }
] [
    void main(void)
    {
    	discard;
    }
] 
lazyshader 0 "apearvertical" [
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    uniform mat4 camprojmatrix;
    uniform vec3 camera;
    varying vec2 texcoord0;
    varying vec4 spacepos;
    varying vec3 campos;
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;
        texcoord0 = vtexcoord0;
        float multi = 8.0;
        spacepos = floor((vvertex + 0.5) / multi) * multi;
        campos = floor((camera + 0.5) / multi) * multi;
    }
] [
    //@(gfetchdefs tex0)
    //uniform vec3 gdepthpackparams;
    layout (location = 0) out vec4 fragcolor;
    varying vec4 spacepos;
    varying vec2 texcoord0;
    varying vec3 campos;
    uniform sampler2D diffusemap;
    void main(void)
    {
    	vec4 diffuse = texture2D(diffusemap, texcoord0);
    	float multi2 = 8.0;
    	vec3 space = floor((spacepos.rgb - campos.rgb) / multi2) * multi2;
    	float alpha = clamp(1.0 + abs(space.b) * -0.025, 0.0, 1.0);
    	
    	if(alpha > 0.001)
    	{
    		alpha = 1.0;
    	}
    	else
    	{
    		alpha = 0.0;
    	}
    	fragcolor = vec4(diffuse.r * alpha, diffuse.g * alpha, diffuse.b * alpha, alpha);
    }
]
lazyshader 0 "acinvert" (fsvs) (fsps [
	fragcolor = mix(color, 1.0 - color, params.x);
] [uniform vec4 params;])
