lazyshader 0 "acblack" (fsvs) (fsps [
		fragcolor = vec4(0.0);
] [])

lazyshader 0 "acblackout" (fsvs) (fsps [
		float blackout;
		float camdif = (camera.z - params.x);
		if(camdif < 0.0)
		{
			blackout = clamp(camdif / params.y * -1, 0.0, 1.0);
		}
		else
		{
			blackout = clamp(camdif / params.z, 0.0, 1.0);
		}
		fragcolor = color * (1.0 - blackout * blackout);
] [uniform vec4 params; uniform vec3 camera;])

// Params: x - blur steps, y - blur size
lazyshader 0 "rdblur" (fsvs) (fsps [
		vec2 tomid = viewsize.xy / 2 - texcoord0.xy;
		float square = length(tomid) / mix(viewsize.x, viewsize.y, 0.5);
		tomid = normalize(tomid) * square * square;
		float samples = 1.0 / params.x;
		for(float multi = 0.0;multi<1.0;multi = multi + samples)
		{
			color += texture2DRect(tex0, texcoord0.xy + tomid * params.y * multi);
		}
		fragcolor = color * samples;
] [uniform vec4 params; uniform vec4 viewsize;])

lazyshader 0 "aclsp" (fsvs) (fsps [
		vec2 res = viewsize.xy;
		vec4 horizon4 = (camprojmatrix * vec4(params.xyz, 1));
		vec2 horizon = horizon4.xy / horizon4.w;
		horizon = horizon * (viewsize.xy / 2) + viewsize.xy / 2;
		vec2 middle = horizon;
		vec2 toMiddle = vec2(middle.x - texcoord0.x, middle.y - texcoord0.y);
		vec2 toMiddlenormal = normalize(toMiddle);
		float distpixel = sqrt(toMiddle.x * toMiddle.x + toMiddle.y * toMiddle.y);
		float dist = distpixel / (max(res.x, res.y));
		vec4 color2 = color;
		vec4 sample2 = color;
		
		float minfactor = 0.85;
		float size = 0.35;
		float suncenter = 0.1;
		float visibility = 1.0;
		
		if(dist < size)
		{
			float multiadd = distpixel * abs(params.w);
			float multi = 0.01 + dist * 2.0;
			for(;multi<1.0;multi = multi + 1 / multiadd)
			{
				vec4 color3 = texture2DRect(tex0, vec2(texcoord0.x + toMiddle.x * multi, texcoord0.y + toMiddle.y * multi));
				float factor = max(color3.x, max(color3.y, color3.z));
				float replacedif = clamp((factor - minfactor) * 1000000.0, 0.0, 1.0);
				color2 = mix(color2, color3, clamp(2.0 / multiadd * replacedif, 0.0, 1.0));
			}
			float scale = (1.0 - (dist - suncenter) / (size - suncenter));
			float replacedif2 = 1.0 - clamp((dist - suncenter) * 1000000.0, 0.0, 1.0);
			sample2 = mix(color, color2, clamp(visibility * scale * scale, 0.0, 1.0));
			sample2 = mix(sample2, mix(color, color2, visibility), replacedif2);
		}
		fragcolor = sample2;
] [uniform vec4 params; uniform mat4 camprojmatrix; uniform vec4 viewsize; uniform vec3 camera;])



lazyshader 0 "aclsspeedlshader" (fsvs) (fsps [
		vec2 res = viewsize.xy;
		
		vec4 horizon4 = (camprojmatrix * vec4(params.xyz, 1));
		vec2 horizon = horizon4.xy / horizon4.w;
		horizon = horizon * (viewsize.xy / 2) + viewsize.xy / 2;
		vec2 middle = horizon;
		vec2 toMiddle = vec2(middle.x - texcoord0.x, middle.y - texcoord0.y);
		vec2 toMiddlenormal = normalize(toMiddle);
		float distpixel = sqrt(toMiddle.x * toMiddle.x + toMiddle.y * toMiddle.y);
		float dist = distpixel / (max(res.x, res.y));
		vec4 color2 = color;
		vec4 sample2 = color;

		float minfactor = 0.85;
		float size = 0.35;
		float suncenter = 0.2;
		float visibility = 1.0;
		
		if(dist < size)
		{
			float multiadd = distpixel * params.w;
			float multi = 0.01 + dist * 2.0;
			for(;multi<1.0;multi = multi + 1 / multiadd){
				vec4 color3 = texture2DRect(tex0, vec2(texcoord0.x + toMiddle.x * multi, texcoord0.y + toMiddle.y * multi));
				vec3 color3hsv = rgb2hsv(color3.rgb);
				float factor = max(color3.x, max(color3.y, color3.z));
				float replacedif = clamp((factor - minfactor) * 1000000.0, 0.0, 1.0);
				float replacedifhsv = clamp((color3hsv.y - 0.3) * 1000000.0, 0.0, 1.0);
				color3 = mix(color3, vec4(0.0), replacedifhsv);
				color2 = mix(color2, color3, clamp(2.0 / multiadd * replacedif, 0.0, 1.0));
			}
			float scale = (1.0 - (dist - suncenter) / (size - suncenter));
			float replacedif2 = 1.0 - clamp((dist - suncenter) * 1000000.0, 0.0, 1.0);
			sample2 = mix(color, color2, clamp(visibility * scale * scale, 0.0, 1.0));
			sample2 = mix(sample2, mix(color, color2, visibility), replacedif2);
		}
		fragcolor = sample2;

] [
	uniform vec4 params;
	uniform mat4 camprojmatrix;
	uniform vec4 viewsize;
	uniform vec3 camera;
	
	vec3 rgb2hsv(vec3 c)
	{
   		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
   		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    	float d = q.x - min(q.w, q.y);
    	float e = 1.0e-10;
    	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}
])


lazyshader 0 "achsvinvert" (fsvs) (fsps [
	vec3 c = color.rgb;
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
   	float d = q.x - min(q.w, q.y);
   	float e = 1.0e-10;
   	vec3 colorHSV = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
   	
   	
   	colorHSV.y = clamp(colorHSV.y * params.x, 0.0, 1.0);
   	if(colorHSV.z > params.y)
   	{
   		colorHSV.z = clamp(colorHSV.z + (colorHSV.z - params.y) * params.w, 0.0, 1.0);
   	}
   	if(colorHSV.z < params.z)
   	{
   		colorHSV.z = clamp(colorHSV.z - (params.z - colorHSV.z) * params.w, 0.0, 1.0);
   	}
   	
   	vec3 cc = colorHSV;
	vec4 Kk = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
   	vec3 pp = abs(fract(cc.xxx + Kk.xyz) * 6.0 - Kk.www);
    fragcolor.rgb =  1.0 - (cc.z * mix(Kk.xxx, clamp(pp - Kk.xxx, 0.0, 1.0), cc.y));
] [uniform vec4 params;])

lazyshader 4 "accnt" (fsvs) (fsps [
	color.rgb += params.y;
    gl_FragColor.rgb = (color.rgb - 0.5) * params.x + 0.5;
] [uniform vec4 params;])
